# -*- coding: utf-8 -*-
"""PCB Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OBlH5NLlA9k70poQL5gH9pmlsXXpu0zD
"""

from google.colab import files
uploaded = files.upload()

!unzip -q 'DeepPCB.v1-raw.yolov5pytorch.zip' -d '/content/DeepPCB'

import os
from PIL import Image
import matplotlib.pyplot as plt

# Updated correct paths
image_dir = "/content/DeepPCB/train/images"
label_dir = "/content/DeepPCB/train/labels"

# List one image
sample_image = os.listdir(image_dir)[0]
image_path = os.path.join(image_dir, sample_image)
label_path = os.path.join(label_dir, sample_image.replace(".jpg", ".txt"))

# Display image
img = Image.open(image_path)
plt.imshow(img)
plt.title(f"Sample Image: {sample_image}")
plt.axis('off')
plt.show()

# Show the annotation
with open(label_path, 'r') as file:
    print("Annotation (YOLO format):\n", file.read())

import os

image_dir = "/content/DeepPCB/train/images"
label_dir = "/content/DeepPCB/train/labels"

image_files = sorted(os.listdir(image_dir))
label_files = sorted(os.listdir(label_dir))

print(f"Total images: {len(image_files)}")
print(f"Total labels: {len(label_files)}")

# Sanity check: Any missing labels or images?
missing_labels = [img for img in image_files if img.replace(".jpg", ".txt") not in label_files]
missing_images = [lbl for lbl in label_files if lbl.replace(".txt", ".jpg") not in image_files]

print(f"Images without labels: {len(missing_labels)}")
print(f"Labels without images: {len(missing_images)}")

from collections import Counter
import os

label_dir = "/content/DeepPCB/train/labels"
label_files = sorted(os.listdir(label_dir))
class_counts = Counter()

for label_file in label_files:
    with open(os.path.join(label_dir, label_file), 'r') as f:
        for line in f:
            cls = int(line.strip().split()[0])
            class_counts[cls] += 1

print("Class distribution:")
for cls_id, count in class_counts.items():
    print(f"Class {cls_id}: {count} instances")

import matplotlib.pyplot as plt

# Extract classes and their counts
classes = list(class_counts.keys())
counts = [class_counts[cls] for cls in classes]

# Plot
plt.figure(figsize=(8, 5))
plt.bar(classes, counts, color='skyblue')
plt.xlabel('Class ID')
plt.ylabel('Number of Instances')
plt.title('Class Distribution in DeepPCB Dataset')
plt.xticks(classes)
plt.grid(axis='y')
plt.show()

import os
import matplotlib.pyplot as plt

bbox_areas = []

for label_file in label_files:
    with open(os.path.join(label_dir, label_file), 'r') as f:
        for line in f:
            _, _, _, w, h = map(float, line.strip().split())
            bbox_areas.append(w * h)

# Plot histogram
plt.figure(figsize=(8, 5))
plt.hist(bbox_areas, bins=50, color='orange', edgecolor='black')
plt.xlabel('Bounding Box Area (normalized)')
plt.ylabel('Frequency')
plt.title('Distribution of Bounding Box Areas')
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt

# Data
labels = [f'Class {cls}' for cls in class_counts.keys()]
sizes = [count for count in class_counts.values()]

# Plot
plt.figure(figsize=(7, 7))
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, colors=plt.cm.Paired.colors)
plt.title('Class Distribution (Pie Chart)')
plt.axis('equal')
plt.show()

import numpy as np

heatmap = np.zeros((100, 100))

for label_file in label_files:
    with open(os.path.join(label_dir, label_file), 'r') as f:
        for line in f:
            _, x, y, _, _ = map(float, line.strip().split())
            x_idx = int(x * 100)
            y_idx = int(y * 100)
            heatmap[y_idx, x_idx] += 1

plt.figure(figsize=(6, 5))
plt.imshow(heatmap, cmap='hot', interpolation='nearest')
plt.title('Heatmap of Bounding Box Centers')
plt.xlabel('Normalized X')
plt.ylabel('Normalized Y')
plt.colorbar(label='Number of Boxes')
plt.show()

import os

label_dir = "/content/DeepPCB/train/labels"
label_files = sorted(os.listdir(label_dir))
inconsistent_files = []

for label_file in label_files:
    with open(os.path.join(label_dir, label_file), 'r') as f:
        for i, line in enumerate(f, 1):
            parts = line.strip().split()
            if len(parts) != 5:
                inconsistent_files.append((label_file, i, line.strip()))
                continue
            try:
                cls = int(parts[0])
                coords = list(map(float, parts[1:]))
                if not all(0.0 <= val <= 1.0 for val in coords):
                    inconsistent_files.append((label_file, i, line.strip()))
            except ValueError:
                inconsistent_files.append((label_file, i, line.strip()))

if inconsistent_files:
    print("Inconsistent labels found:")
    for file, line_num, content in inconsistent_files:
        print(f"{file} [line {line_num}]: {content}")
else:
    print("âœ… All label files are consistent.")

# Install Ultralytics (YOLOv8)
!pip install ultralytics

# Import and load a model to verify setup
from ultralytics import YOLO

# Load a pretrained model (e.g., YOLOv8n)
model = YOLO("yolov8n.pt")

# Print model summary
model.info()

!find /content -name "data.yaml"

from ultralytics import YOLO

# Load a YOLOv8 Nano model (you can change to yolov8s, yolov8m, etc.)
model = YOLO("yolov8n.yaml")

# Start training
model.train(data="/content/DeepPCB/data.yaml", epochs=50, imgsz=640)

model.val()

!ls /content/DeepPCB/valid/images

img_path = "/content/DeepPCB/valid/images/20085317_test_jpg.rf.977e032704064b3e8e0f5caf6384bd4c.jpg"

results = model.predict(source=img_path, save=True, conf=0.5)

from IPython.display import Image, display

result_path = "runs/detect/train23/20085317_test_jpg.rf.977e032704064b3e8e0f5caf6384bd4c.jpg"
display(Image(filename=result_path))

!find runs/detect/ -name "best.pt"

from ultralytics import YOLO

model = YOLO("runs/detect/train2/weights/best.pt")

# Run prediction on all validation images and save results
results = model.predict(source="/content/DeepPCB/valid/images", save=True, conf=0.5)

import os
from IPython.display import Image, display

# Path to the latest prediction folder (e.g., runs/detect/predict)
pred_dir = "runs/detect/predict"

# Show first 5 prediction images
for img_file in os.listdir(pred_dir)[:5]:
    if img_file.endswith(".jpg"):
        display(Image(filename=os.path.join(pred_dir, img_file)))

# Zip the prediction folder
!zip -r predictions.zip runs/detect/predict

# Download
from google.colab import files
files.download("predictions.zip")



import pandas as pd
import matplotlib.pyplot as plt

# Load metrics
df = pd.read_csv("runs/detect/train2/results.csv")

# Plot mAP50 and mAP50-95
plt.figure(figsize=(10, 5))
# Clean up column names by stripping whitespace
df.columns = df.columns.str.strip()

# Now you can safely access the metrics
plt.plot(df["metrics/mAP50(B)"], label="mAP@0.5")
plt.plot(df["metrics/mAP50-95(B)"], label="mAP@0.5:0.95")
plt.title("YOLOv8 Validation mAP Over Epochs")
plt.xlabel("Epoch")
plt.ylabel("mAP")
plt.legend()
plt.grid(True)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load metrics from YOLO training
df = pd.read_csv("runs/detect/train2/results.csv")
df.columns = df.columns.str.strip()  # Remove extra spaces

plt.figure(figsize=(10, 5))
plt.plot(df["metrics/precision(B)"], label="Precision")
plt.plot(df["metrics/recall(B)"], label="Recall")
plt.title("YOLOv8 Validation Precision & Recall Over Epochs")
plt.xlabel("Epoch")
plt.ylabel("Score")
plt.legend()
plt.grid(True)
plt.show()

final_metrics = df.iloc[-1]
print("Final Metrics:")
print(f"Precision: {final_metrics['metrics/precision(B)']:.4f}")
print(f"Recall:    {final_metrics['metrics/recall(B)']:.4f}")
print(f"mAP@0.5:   {final_metrics['metrics/mAP50(B)']:.4f}")
print(f"mAP@0.5:0.95: {final_metrics['metrics/mAP50-95(B)']:.4f}")

from ultralytics import YOLO

# Load the trained model
model = YOLO("runs/detect/train2/weights/best.pt")

# Inference on a test image from your dataset
image_path = "/content/DeepPCB/valid/images/20085317_test_jpg.rf.977e032704064b3e8e0f5caf6384bd4c.jpg"

# Predict on the selected image and save output
results = model.predict(source=image_path, save=True, conf=0.5)

import matplotlib.pyplot as plt
import cv2

# Load and display the result
from glob import glob
import os

# Get latest prediction folder
output_folder = sorted(glob("runs/detect/predict*"))[-1]
result_image = os.path.join(output_folder, os.path.basename(image_path))

# Display
img = cv2.imread(result_image)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
plt.imshow(img)
plt.axis('off')
plt.title("Prediction")
plt.show()

!zip -r prediction_results.zip runs/detect/predict

from google.colab import files
files.download("prediction_results.zip")

from IPython.display import Image, display

display(Image(filename='runs/detect/train2/results.png'))
display(Image(filename='runs/detect/train2/confusion_matrix.png'))

import cv2
import matplotlib.pyplot as plt
import os

def draw_boxes(image_path, label_path=None, prediction=None, is_prediction=False):
    img = cv2.imread(image_path)
    h, w = img.shape[:2]

    # Draw ground truth boxes (YOLO format)
    if label_path and os.path.exists(label_path):
        with open(label_path, 'r') as f:
            for line in f:
                cls, x, y, bw, bh = map(float, line.strip().split())
                x1 = int((x - bw/2) * w)
                y1 = int((y - bh/2) * h)
                x2 = int((x + bw/2) * w)
                y2 = int((y + bh/2) * h)
                cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
                cv2.putText(img, f"GT-{int(cls)}", (x1, y1 - 5),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)

    # Draw prediction boxes from results
    if is_prediction and prediction:
        for box in prediction.boxes:
            x1, y1, x2, y2 = map(int, box.xyxy[0])
            conf = float(box.conf[0])
            cls = int(box.cls[0])
            cv2.rectangle(img, (x1, y1), (x2, y2), (0, 0, 255), 2)
            cv2.putText(img, f"Pred-{cls} ({conf:.2f})", (x1, y2 + 15),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1)
    return cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

from ultralytics import YOLO

# Load model and image
model = YOLO("runs/detect/train2/weights/best.pt")
image_path = "/content/DeepPCB/valid/images/20085317_test_jpg.rf.977e032704064b3e8e0f5caf6384bd4c.jpg"
label_path = image_path.replace("images", "labels").replace(".jpg", ".txt")

# Run prediction
results = model.predict(image_path, conf=0.5)

# Get prediction object
pred = results[0]

# Generate side-by-side comparison
gt_img = draw_boxes(image_path, label_path)
pred_img = draw_boxes(image_path, prediction=pred, is_prediction=True)

# Plot side by side
plt.figure(figsize=(15, 7))
plt.subplot(1, 2, 1)
plt.title("Ground Truth")
plt.imshow(gt_img)
plt.axis('off')

plt.subplot(1, 2, 2)
plt.title("Prediction")
plt.imshow(pred_img)
plt.axis('off')
plt.show()